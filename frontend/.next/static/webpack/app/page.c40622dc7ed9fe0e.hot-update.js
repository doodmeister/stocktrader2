"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIError: () => (/* binding */ APIError),\n/* harmony export */   API_CONFIG: () => (/* binding */ API_CONFIG),\n/* harmony export */   API_ENDPOINTS: () => (/* binding */ API_ENDPOINTS),\n/* harmony export */   analysisAPI: () => (/* binding */ analysisAPI),\n/* harmony export */   api: () => (/* binding */ api),\n/* harmony export */   apiClient: () => (/* binding */ apiClient),\n/* harmony export */   healthAPI: () => (/* binding */ healthAPI),\n/* harmony export */   marketDataAPI: () => (/* binding */ marketDataAPI),\n/* harmony export */   utils: () => (/* binding */ utils)\n/* harmony export */ });\n// API Configuration\nconst API_CONFIG = {\n    BASE_URL: \"http://localhost:8000\" || 0,\n    WS_URL: \"ws://localhost:8000/ws\" || 0,\n    TIMEOUT: 10000\n};\n// API Endpoints\nconst API_ENDPOINTS = {\n    // Health\n    HEALTH: '/api/v1/health',\n    // Market Data  \n    MARKET_DATA: {\n        DOWNLOAD: '/api/v1/market-data/download',\n        LOAD_CSV: '/api/v1/market-data/load-csv',\n        LIST_FILES: '/api/v1/market-data/list-files',\n        INFO: '/api/v1/market-data/info',\n        VALIDATE: '/api/v1/market-data/validate'\n    },\n    // Analysis endpoints\n    ANALYSIS: {\n        TECHNICAL: '/api/v1/analysis/technical-indicators',\n        PATTERNS: '/api/v1/analysis/pattern-detection',\n        OPENAI: '/api/v1/analysis/openai'\n    }\n};\n// API Error class\nclass APIError extends Error {\n    constructor(status, message, response){\n        super(message), this.status = status, this.response = response;\n        this.name = 'APIError';\n    }\n}\n// HTTP Client\nclass ApiClient {\n    async request(endpoint) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const url = \"\".concat(this.baseUrl).concat(endpoint);\n        const config = {\n            ...options,\n            headers: {\n                'Content-Type': 'application/json',\n                ...options.headers\n            }\n        };\n        try {\n            const controller = new AbortController();\n            const timeoutId = setTimeout(()=>controller.abort(), this.timeout);\n            const response = await fetch(url, {\n                ...config,\n                signal: controller.signal\n            });\n            clearTimeout(timeoutId);\n            if (!response.ok) {\n                let errorMessage = \"HTTP \".concat(response.status, \": \").concat(response.statusText);\n                try {\n                    const errorBody = await response.json();\n                    errorMessage = errorBody.detail || errorMessage;\n                } catch (e) {\n                // If we can't parse the error body, use the status text\n                }\n                throw new APIError(response.status, errorMessage, response);\n            }\n            return await response.json();\n        } catch (error) {\n            if (error instanceof APIError) {\n                throw error;\n            }\n            // Network or other errors\n            throw new APIError(0, \"Network error: \".concat(error instanceof Error ? error.message : 'Unknown error'));\n        }\n    }\n    // HTTP Methods\n    async get(endpoint, params) {\n        const url = params ? \"\".concat(endpoint, \"?\").concat(new URLSearchParams(params)) : endpoint;\n        return this.request(url, {\n            method: 'GET'\n        });\n    }\n    async post(endpoint, data) {\n        return this.request(endpoint, {\n            method: 'POST',\n            body: data ? JSON.stringify(data) : undefined\n        });\n    }\n    async put(endpoint, data) {\n        return this.request(endpoint, {\n            method: 'PUT',\n            body: data ? JSON.stringify(data) : undefined\n        });\n    }\n    async delete(endpoint) {\n        return this.request(endpoint, {\n            method: 'DELETE'\n        });\n    }\n    constructor(baseUrl = API_CONFIG.BASE_URL, timeout = API_CONFIG.TIMEOUT){\n        this.baseUrl = baseUrl;\n        this.timeout = timeout;\n    }\n}\n// Export singleton instance\nconst apiClient = new ApiClient();\n// Market Data API functions\nconst marketDataAPI = {\n    /**\r\n   * Download stock data from Yahoo Finance\r\n   */ async downloadStockData (request) {\n        return apiClient.post(API_ENDPOINTS.MARKET_DATA.DOWNLOAD, request);\n    },\n    /**\r\n   * Load existing CSV file\r\n   */ async loadCSVData (request) {\n        return apiClient.post(API_ENDPOINTS.MARKET_DATA.LOAD_CSV, request);\n    },\n    /**\r\n   * List available CSV files\r\n   */ async listCSVFiles () {\n        return apiClient.get(API_ENDPOINTS.MARKET_DATA.LIST_FILES);\n    },\n    /**\r\n   * Get stock information\r\n   */ async getStockInfo (symbol) {\n        return apiClient.get(\"\".concat(API_ENDPOINTS.MARKET_DATA.INFO, \"/\").concat(encodeURIComponent(symbol)));\n    },\n    /**\r\n   * Validate stock symbol\r\n   */ async validateSymbol (symbol) {\n        return apiClient.get(\"\".concat(API_ENDPOINTS.MARKET_DATA.VALIDATE, \"/\").concat(encodeURIComponent(symbol)));\n    }\n};\n// Health check API\nconst healthAPI = {\n    /**\r\n   * Check if the backend is healthy\r\n   */ async checkHealth () {\n        return apiClient.get(API_ENDPOINTS.HEALTH);\n    }\n};\n// Analysis API\nconst analysisAPI = {\n    /**\r\n   * Run technical analysis on stock data\r\n   */ async runTechnicalAnalysis (request) {\n        return apiClient.post(API_ENDPOINTS.ANALYSIS.TECHNICAL, request);\n    },\n    /**\r\n   * Detect candlestick patterns\r\n   */ async detectPatterns (request) {\n        return apiClient.post(API_ENDPOINTS.ANALYSIS.PATTERNS, request);\n    }\n};\n// Utility functions\nconst utils = {\n    /**\r\n   * Format currency values\r\n   */ formatCurrency (value) {\n        return new Intl.NumberFormat('en-US', {\n            style: 'currency',\n            currency: 'USD'\n        }).format(value);\n    },\n    /**\r\n   * Format percentage values\r\n   */ formatPercentage (value) {\n        return \"\".concat(value >= 0 ? '+' : '').concat(value.toFixed(2), \"%\");\n    },\n    /**\r\n   * Format large numbers (market cap, volume)\r\n   */ formatLargeNumber (value) {\n        if (value >= 1e12) {\n            return \"\".concat((value / 1e12).toFixed(1), \"T\");\n        } else if (value >= 1e9) {\n            return \"\".concat((value / 1e9).toFixed(1), \"B\");\n        } else if (value >= 1e6) {\n            return \"\".concat((value / 1e6).toFixed(1), \"M\");\n        } else if (value >= 1e3) {\n            return \"\".concat((value / 1e3).toFixed(1), \"K\");\n        }\n        return value.toString();\n    },\n    /**\r\n   * Get period display name\r\n   */ getPeriodDisplayName (period) {\n        const periodMap = {\n            '1d': '1 Day',\n            '5d': '5 Days',\n            '1mo': '1 Month',\n            '3mo': '3 Months',\n            '6mo': '6 Months',\n            '1y': '1 Year',\n            '2y': '2 Years',\n            '5y': '5 Years',\n            '10y': '10 Years',\n            'ytd': 'Year to Date',\n            'max': 'All Time'\n        };\n        return periodMap[period] || period;\n    },\n    /**\r\n   * Get interval display name\r\n   */ getIntervalDisplayName (interval) {\n        const intervalMap = {\n            '1m': '1 Minute',\n            '2m': '2 Minutes',\n            '5m': '5 Minutes',\n            '15m': '15 Minutes',\n            '30m': '30 Minutes',\n            '60m': '1 Hour',\n            '90m': '90 Minutes',\n            '1h': '1 Hour',\n            '1d': '1 Day',\n            '5d': '5 Days',\n            '1wk': '1 Week',\n            '1mo': '1 Month',\n            '3mo': '3 Months'\n        };\n        return intervalMap[interval] || interval;\n    }\n};\n// Legacy API functions (keep for compatibility, but these won't work with current backend)\nconst api = {\n    // Market Data - Updated to use actual backend\n    downloadStockData: marketDataAPI.downloadStockData,\n    loadCSVData: marketDataAPI.loadCSVData,\n    listCSVFiles: marketDataAPI.listCSVFiles,\n    getStockInfo: marketDataAPI.getStockInfo,\n    validateSymbol: marketDataAPI.validateSymbol,\n    // Health\n    checkHealth: healthAPI.checkHealth,\n    // Analysis\n    runTechnicalAnalysis: analysisAPI.runTechnicalAnalysis,\n    detectPatterns: analysisAPI.detectPatterns\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api.ts\n"));

/***/ })

});